<h1 class="text-center">Dota Draft Log</h2>
  <p class="text-center">
    <a href="/">Home</a>
    // 
    <a href="/teams"> List of Saved Teams by Users</a>
    //
    <a href="/users">Users</a>
  </p>
<div class="container groupgroup" >
  <form method="POST" action="/teams">
    <div class="row justify-content-md-center">
      <div class="col" id="comp">
        <div class="compCell" name="hero1" cellId="1"></div>
        <div class="compCell" name="hero2" cellId="2"></div>
        <div class="compCell" name="hero3" cellId="3"></div>
        <div class="compCell" name="hero4" cellId="4"></div>
        <div class="compCell" name="hero5" cellId="5"></div>
      </div>

        <div class="formGroup">

          <select name="userId" id="cars">
            <% users.forEach(users => { %>
              <option value="<%= users.dataValues.id %>"> <%= users.dataValues.user_name %> </option>
              <% }) %> 
            </select>
            
            <input type="text" name="teamName" id='name' placeholder="Team Name" required>
            <button class="btn" type="submit">Save</button>
        </div>

    </div>


  </form>
</div>
<br>
<br>

<div class="container index heroGrouping">
  <div>Strength:</div>
 
  <% const strHeroes = dotaData.filter(function(hero) {
    return hero.primary_attr === "str" 
  }) %>
  <% strHeroes.forEach(function(hero) { %>  
    <div 
      class="col dotaHeroCard" 
      data-id="<%= hero.hero_id %>"
      data-name="<%= hero.localized_name %>"
      data-img="<%= hero.img %>"
    >
      <!-- <p> <%= hero.localized_name %> <%= hero.hero_id %></p> -->
      <img src="http://cdn.dota2.com/<%= hero.img%>" width="100px">
    </div>  
  <% }) %>
</div>

<br>

<div class="container index heroGrouping">
  <div>Agility:</div>

  <% const agiHeroes = dotaData.filter(function(hero) {
    return hero.primary_attr === "agi" 
  }) %>
  <% agiHeroes.forEach(function(hero) { %>  
    <div 
      class="col dotaHeroCard" 
      data-id="<%= hero.hero_id %>"
      data-name="<%= hero.localized_name %>"
      data-img="<%= hero.img %>"
    >
      <!-- <p> <%= hero.localized_name %> <%= hero.hero_id %></p> -->
      <img src="http://cdn.dota2.com/<%= hero.img%>" width="100px">
    </div>  
  <% }) %>
</div>

<br>

<div class="container index heroGrouping">
  <div>Intelligence:</div>
  
<% const intHeroes = dotaData.filter(function(hero) {
  return hero.primary_attr === "int" 
}) %>

  <% intHeroes.forEach(function(hero) { %>  
      <div 
      class="col dotaHeroCard" 
      data-id="<%= hero.hero_id %>"
      data-name="<%= hero.localized_name %>"
      data-img="<%= hero.img %>"
      >
      <!-- <p> <%= hero.localized_name %> <%= hero.hero_id %></p> -->
      <img src="http://cdn.dota2.com/<%= hero.img%>" width="100px">
    </div> 
    <% }) %>
</div>



<script>
const dotaData = <%- JSON.stringify(dotaData) %>;
const teamComp = []
const alreadyAdded = {};
const heroCards = document.querySelectorAll('div.dotaHeroCard');
const teamCompList = document.getElementById('comp');
// bind click events to hero cards
heroCards.forEach((heroCard) => {
  const props = heroCard.dataset;
  heroCard.addEventListener('click', e => {
    addHero(
      {
        id: props.id,
        name: props.name,
        img: props.img
      }
    )
  })
})
function addHero(hero) {
  if (teamComp.length >= 5) {
    console.log('team is full')
    return;
  }
  // hero is alrdy added reminder
  if (alreadyAdded[hero.id]) {
    console.log(` ${hero.name} has already been added, pick another hero`)
    return;
  }
  alreadyAdded[hero.id] = true;
  teamComp.push(hero); //<-- push/add the hero into the array
  console.log('added hero: ', hero.name, hero); // <--- confirm add
  render();// <--- redraws
}
function removeHero(heroId, index) {
  const removed = teamComp.splice(index, 1); // <--- removes hero
  console.log('removed hero', removed[0].name, ' at index', index); // <--- console log to confirm
  alreadyAdded[heroId] = false; // < --- check the state if it exists or not,
  render(); // <--- redraws
}
function render() {
  console.log(` starting the render function with ${teamComp.length} hero(s)`) // <-- check if the render works
  teamCompList.innerHTML = ''; //<--- DOM manipulate to clear the list
  // this fills the teamCompList with heros based on the teamComp array.
  teamComp.forEach ((hero, index) => { // <--- this is for display each hero in the array
    const heroCard = document.createElement('div');// <--- this is making a new div that is the cell with the hero, visually
    heroCard.classList.add('compCell'); // <--- this is for adding the cell that the hero exists in
    heroCard.classList.add('teamCompHeroCard') // <--- this is for adding the hero card in the cell above
    heroCard.setAttribute('data-id', hero.id); // <--- this is getting the cell with the hero card, an id
    heroCard.setAttribute('name', hero.name);
    const nameLabel= document.createElement('input'); // <--- this is making a new div with name of the hero in the cell.
    nameLabel.style.width = '100px'
    nameLabel.setAttribute('name', 'heros' + index) 
    nameLabel.setAttribute('value', hero.name)
    nameLabel.innerHTML = hero.name; // <--- hero name is being pulled from the API // dota data in the for each function at the top
    heroCard.appendChild(nameLabel); // <--- appendChild adds reference to the nameLabel
    const heroImage = document.createElement('img'); // <--- this is making the image of the hero for the cell 
    heroImage.setAttribute('width', 100); // <--- setting its width so it fits evenly.
    heroImage.setAttribute('src', `http://cdn.dota2.com/${hero.img}`) // <--- this is the source of the image, in an interpolated string using the $ sign
    heroCard.appendChild(heroImage);
    const imgInput = document.createElement('input')
    imgInput.setAttribute('name', 'heroImage' + index)
    imgInput.setAttribute('value', hero.img)
    imgInput.style.display = 'none'
    heroCard.appendChild(imgInput)
    teamCompList.appendChild(heroCard); // <--- this is adding all this to the hero card (individual) that is being created in the for loop every time you click
  })
  // this for loop is to fill the rest of the team comp list display with empty cards
  for (let i = 0; i < 5 -teamComp.length; i++) { 
    const placeholderCard = document.createElement('div') // <--- variable for the div
    placeholderCard.classList.add('compCell') // <-- creating the div
    teamCompList.appendChild(placeholderCard) // <-- adds  the created div (placeholdercard) into teamcomplist with append child.
  }
  // add "click event" remove hero to each card
  const teamCompListCards = document.querySelectorAll('div.teamCompHeroCard');
  
  
  teamCompListCards.forEach((card, index) => { // <--- for each card in the team comp list
    card.addEventListener('click', e=> { // <--- run this click event
      removeHero(card.dataset.id, index); // <-- remove the hero from the index
    
    });
  });
}
</script>