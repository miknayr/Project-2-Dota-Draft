figure out how to display data

figure out how to parse through the data


create the database models?
refer back to the image


- createdb dota2
- sequelize model:create --name user --attributes user_name:STRING
- sequelize model:create --name team --attributes userId:INTEGER,team_name:STRING,hero_1:STRING,hero_2:STRING,hero_3:STRING,hero_4:STRING,hero_5:STRING
- 

   static associate(models) {
      // define association here
      models.team.belongsTo(models.user)
    }

       static associate(models) {
      // define association here
      models.user.hasMany(models.team)
    }

write the models

write the routes


**********************************************************
                  
**********************************************************

1. Create your models for teams and heroes

2. (GET) Routes:
[x] '/' home page is your team-builder.ejs view 
[x] '/:hero_id' to view details about a specific hero

[ ] '/teams' to view a list of created teams    
[ ] '/teams/:team_id' to view details about a specific team <---
[ ] '/teams/:team_id/edit' to edit a team, should also use 
[ ] the team-builder.ejs view 
       (does a res.send({ team: [*heroes in here*] }))


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ do later
// stretch goal?
'/teams/compare' takes you to a page where you can 
  select two teams to compare side by side?
'/teams/compare/:team_a/vs/:team_b' a route shortcut
  so you can link to a specific matchup?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ do later


          3. team-builder.ejs view
          this is going to be the main interactive page, containing:
            - the full hero roster
            - a team builder with a save button
              [:)] [:(] [:/] [:3] [:0] <--- faces  <--- x
                          [save team]

                          // DONE

          This page contains logic:
            - You need an team array [] of heroes (see note at the bottom) that holds the team you are currently building
            - clicking on a hero in the roster adds the hero to your team array 
            - clicking X on a hero in the team builder removes them from your array
            - as your team array changes, you need to update the UI accordingly

          There's only 2 main events on this page:
            - add_hero(hero)
            - remove_hero(index)
            and every time you add or remove a hero, you need to call render() to update the UI

            *** PSEUDO CODE FOR team-builder.ejs LOGIC (I don't know where you can write JS in an ejs file but I'm sure you know) ***

            // you get a team from the res.send({team: [...]}) or you don't, so...
            const team = existingTeam || [];

            function add_hero(hero) {
              // prevent team size from exceeding 5
              if (team.length >= 5) {
                // do nothing
                return;
              }

              team.push(hero);
              render();
            }

            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#remove_1_element_at_index_3
            function remove_hero(index) {
              team.splice(index, 1);
              render();
            }

                    // you gotta figure out how to do your DOM query selects, and then...
                    // you need to re-render every time the team array changes to keep the UI up-to-date
                    render() {
                      // clear out the contents
                      domTeamList.innerHTML = '';

                      // and then fill it back up
                      team.forEach((hero) => {
                        // you need a DOM element for each hero...
                        // also you're going to need to figure out the specifics on how to do this
                        const heroElement = document.createElement('div')
                        // you probably want the hero.portraitUrl and hero.name in the heroElement

                        // and then you add the DOM element to add it back to the UI (and now it's re-rendered!)
                        domTeamList.appendChild(heroElement)
                      });

                      // and that's it! :)
}

*** PSEUDO CODE DONE ***

Hi, if you're wondering what a `hero` is, it looks like this:
{
  name: "Anti-Mage",
  portraitUrl: "https://static.wikia.nocookie.net/dota2_gamepedia/images/8/8e/Anti-Mage_icon.png/revision/latest/scale-to-width-down/256?cb=20200916215957",
  category: "strength",
}







app.get('/teams/compare', (req, res) => {})



next steps ;

[] need to save the team comp list array into database.
  - [] need to make views/teams page
  - [] need to make views/ single team page with STATS??? (stretch goal)
  - [] need to create the RESTful routes for the team and index page
  - [] need to create "favorites" button form // refer to pokemon/dinocrud

[] edit a team, and be able to load the saved team. ( use the database id )
  - [] be able reroute to the main page.

[] display win percentage on main page (can be a div)





https://sequelize.org/master/class/lib/model.js~Model.html#static-method-bulkCreate



// from here
const fs = require('fs')
const express = require('express')
const router = express.Router()
const db = require("../models");

// const Team = db.team;
// const Heroes = db.heroes;
const axios = require('axios'); 



router.get('/', (req, res) => {
  res.send('ðŸ‘‹ This is a test ðŸ‘‹')
// db.team.findAll({
  // req.query to find the "team"
  // where { }
// })
// .then(() => {
//   // res.render('team/index', {})
// }).catch(err => {console.log(err)})
});



router.post('/', (req, res) => {
  res.send('ðŸ™‚ This is a test ðŸ™‚')
  // res.redirect('/')
})

router.put('/edit', (req,res) => {
  db.team.update({
    name: req.body.teamName // <-- current name, to be changed.
  }, {
    where: {
      name: req.body.query // <--- update from the form??
    }
  })
  .then(numRowsChanged=>{
      // Returns a value of how many rows were altered by this update
      console.log(numRowsChanged)
      process.exit()
  });
});


router.delete('/delete', (req, res) => {
  db.team.destroy({
    where: { name: req.body.delete }
  })
  .then(numRowsDeleted=>{
      console.log(numRowsDeleted)
    // do something when done deleting
      process.exit()
  });
} )








module.exports = router

// above this